-- requires a mining turtle
local targs = {...}
local numBlocks = 1
local dfltTries = 10
local numTries = dfltTries

local function showHelp()
    print("Usage: clearforward [numBlocks] [numTries]")
    print("Where:")
    print("   numBlocks is the number of blocks to move forward (defaults to 1)")
    print("   numTries is the number of times to try clearing ahead (defaults to "..dfltTries)
    print(" ")    
end

local function digForward()
  local tryCount = 1
  turtle.dig()
  while turtle.detect() and (tryCount <= numTries) do
    turtle.dig()
    tryCount = tryCount + 1
    print("Try and clear ahead (attempt " .. tryCount .. "/" .. numTries .. ")")
    sleep(0.5)
  end
  if tryCount > numTries then
    error("Cannot dig forward")
    return
  end
end

local function digUp()
  local tryCount = 1
  turtle.digUp()
  while turtle.detectUp() and (tryCount <= numTries) do
    turtle.digUp()
    tryCount = tryCount + 1
    print("Try and clear up (attempt " .. tryCount .. "/" .. numTries .. ")")
    sleep(0.5)
  end
  if tryCount > numTries then
    error("Cannot dig up.")
    return
  end
end

-- parse args
if targs[1] ~= nil then
    -- check for help
    if targs[1] == "h" or targs[1] == "help" or targs[1] == "?" then
        showHelp()
        return
    end
    numBlocks = tonumber(targs[1])
    if numBlocks < 1 then
        numBlocks = 1
    end    
end

if targs[2] ~= nil then
    numTries = tonumber(targs[2])
    if numTries < 1 then
        numTries = dfltTries
    end
end

for i=1,numBlocks do
  digForward()
  turtle.forward()
  digUp()
  turtle.digDown()
end

print("Done.")

